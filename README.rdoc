###############################
#### CREATING THE DEPOT APP ###
###############################

#### INITIAL SETUP ###
# (1) Create App 
    $ rails _3.2.6_ new depot
# (2) Create Scaffold for Products Controller/Product Model  
    $ rails generate scaffold Product title:string description:text image_url:string price:decimal
# (3) To refine the database model for Product, go to the migration file (edit this stuff with activerecord syntax)
# (4) Apply changes to model
    $ rake db:migrate 
    # (the products table is added to the database defined by the development section of the database.yml file)
# (5) To test: 
    $ rake test 
# (6) Import seed data to work with 
    # go to seeds.rb in db
    # enter text data script
    # To populate your products table with test data, run the following command:
    $ rake db:seed
# (7) Style the data! 
    # go to stylesheet generated with products controller (products.css.scss in the directory app/assets/stylesheets.)
    # add css
    # define the products class used by this stylesheet (the application.html.erb file)
    # edit the index.html.erb file in the views >products 
      # to show alternating colors for rows: <tr class="<%= cycle('list_line_odd', 'list_line_even') %>"> 
      # confirm delete pop-up:     
          # <td class="list_actions">
       #    <%= link_to 'Show', product %><br/>
       #    <%= link_to 'Edit', edit_product_path(product) %><br/> 
       #    <%= link_to 'Destroy', product, method: :delete,
       #                data: { confirm: 'Are you sure?' } %>
       #    </td> 
# (8) Config for Github
    $ depot> git config --global --add user.name "SamanthaRadocchia"
    $ depot> git config --global --add user.email samantha.radocchia@gmail.com
      # You can verify the configuration with the following command:
      $ depot> git config --global --list

#### VALIDATION ####
# (1) Add validation to model layer (in app/models/product.rb)
    # Go to model for Class Product (in app/models/product.rb)
    # VERIFY THAT ALL TEXT FIELDS CONTAIN SOMETHING - use presence 
        validates :title, :description, :image_url, presence: true (add this to the class Product)
    # VERIFY THAT PRICE IS VALID NUMBER - use numericality and :greater_than_or_equal_to option a value of 0.01
        validates :price, numericality: {greater_than_or_equal_to: 0.01}
    # VERIFY THAT EACH PRODUCT HAS UNIQUE TITLE - use uniqueness 
        validates :title, uniqueness: true
    # VERIFY THAT URL ENTERED FOR THE IMAGE IS VALID - use format 
        validates :image_url, allow_blank: true, format: { 
          with: %r{\.(gif|jpg|png)\Z}i,
          message: 'must be a URL for GIF, JPG or PNG image.'
        }
# (2) Set up Unit tests in test > functional > products_controller_test.rb and test >unit > product_test.rb

#### CATALOG DISPLAY #### 
# (1) Create consumer-facing controller
    # (The Products controller is used by the seller to administer the Depot application.)
    # (The Store controller is used by the paying customer to view products.)
    # Create the store controller with the following command:
      $ rails generate controller Store index
# (2) Make Store the root URL for the site (so the customer arrives and sees the catalog)
    # go to config/routes.rb and add the following: 
      root to: 'store#index', as: 'store'
    # delete the public/index.html by entering:
      $ rm public/index.html
# (3) Display a Simple List of Products in the database
    # go to store_controller.rb and add the following to index:
        class StoreController < ApplicationController 
          def index
            @products = Product.order(:title)
          end 
        end
# (4) Write the Store view template (found in index.html.erb in app/views/store)
# (5) Add a stylesheet (found in app/assets/stylesheets/store.css.scss)
# (6) Add a PAGE LAYOUT 
    # application.html.erb --> this file is the layout used for all views for all controllers that donâ€™t otherwise provide a layout, we can change the look and feel of the entire site by editing just one file
      # Update application.html.erb (DEFAUL PAGE LAYOUT) to include a banner and a sidebar
      # About YIELD (When we invoke yield, Rails automatically substitutes in the page-specific content)
    # to make this work, rename application.css to application.css.scss and add default css